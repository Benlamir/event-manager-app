AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  event-manager-app

  Sample SAM Template for event-manager-app

Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON


Resources:
  # This is our explicitly defined HTTP API with an inline OpenAPI definition
  EventsApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins: ["*"]
        AllowHeaders: ["Content-Type", "X-Amz-Date", "Authorization", "X-Api-Key", "X-Amz-Security-Token"]
        AllowMethods: ["GET", "POST", "OPTIONS"]
      DefinitionBody:
        openapi: '3.0.1'
        info:
          title: !Ref AWS::StackName
          version: '1.0'
        paths:
          /events:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateEventFunction.Arn}/invocations"
          /events/{event_id}/participants:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetParticipantsFunction.Arn}/invocations"
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterParticipantFunction.Arn}/invocations"

  EventsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: EventsManagementTable
      PrimaryKey:
        Name: PK
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  CreateEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/create_event/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 20
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsTable
      Environment:
        Variables:
          TABLE_NAME: !Ref EventsTable

  RegisterParticipantFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/register_participant/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 20
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsTable
      Environment:
        Variables:
          TABLE_NAME: !Ref EventsTable

  GetParticipantsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/get_participants/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 20
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EventsTable
      Environment:
        Variables:
          TABLE_NAME: !Ref EventsTable

Outputs:
  EventsApi:
    Description: "API Gateway endpoint URL for Events API"
    Value: !Sub "https://${EventsApi}.execute-api.${AWS::Region}.amazonaws.com/"
  CreateEventFunctionArn:
    Description: "Create Event Lambda Function ARN"
    Value: !GetAtt CreateEventFunction.Arn
  CreateEventFunctionIamRoleArn:
    Description: "Implicit IAM Role created for Create Event function"
    Value: !GetAtt CreateEventFunctionRole.Arn