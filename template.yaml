AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  event-manager-app

  Sample SAM Template for event-manager-app

Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON

Resources:
  EventsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: EventsManagementTable
      PrimaryKey:
        Name: PK
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  CreateEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/create_event/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 20
      Architectures:
        - x86_64
      Events:
        CreateEventApi:
          Type: Api
          Properties:
            Path: /events
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsTable
      Environment:
        Variables:
          TABLE_NAME: !Ref EventsTable

  RegisterParticipantFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/register_participant/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 20
      Architectures:
        - x86_64
      Events:
        RegisterParticipantApi:
          Type: Api
          Properties:
            Path: /events/{event_id}/participants
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsTable
      Environment:
        Variables:
          TABLE_NAME: !Ref EventsTable
  
  GetParticipantsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/get_participants/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 20
      Architectures:
        - x86_64
      Events:
        GetParticipantsApi:
          Type: Api
          Properties:
            Path: /events/{event_id}/participants
            Method: GET
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EventsTable
      Environment:
        Variables:
          TABLE_NAME: !Ref EventsTable

  AmplifyHosting:
    Type: AWS::Amplify::App
    Properties:
      AppName: event-manager-frontend
      Repository: https://github.com/Benlamir/event-manager-app
      AccessToken: "{{resolve:secretsmanager:github-token}}"
      BuildSpec:
        version: 1
        frontend:
          phases:
            preBuild:
              commands:
                - npm install
            build:
              commands:
                - npm run build
        artifacts:
          baseDirectory: build
          files:
            - "**/*"
        cache:
          paths:
            - node_modules/

Outputs:
  EventsApi:
    Description: "API Gateway endpoint URL for Events API"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/events"
  CreateEventFunctionArn:
    Description: "Create Event Lambda Function ARN"
    Value: !GetAtt CreateEventFunction.Arn
  CreateEventFunctionIamRoleArn:
    Description: "Implicit IAM Role created for Create Event function"
    Value: !GetAtt CreateEventFunctionRole.Arn